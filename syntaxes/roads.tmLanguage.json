{
	"name": "Roads",
	"scopeName": "source.roads",
	"fileTypes": [
		"rd"
	],
	"patterns": [
		{
			"include": "#whitespace"
		},
		{
			"include": "#declaration"
		},
		{
			"include": "#value"
		}
	],
	"repository": {
		"declaration": {
			"patterns": [
				{
					"name": "meta.declaration.roads",
					"match": "((?:[A-Za-z_][A-Za-z0-9_]*|\".+\"|'.+')(?:\\.(?:[A-Za-z_][A-Za-z0-9_]*|\".+\"|'.+'))*(?:\\[\\])?)\\s*(=)\\s*",
					"captures": {
						"1": {
							"name": "variable.other.roads"
						},
						"2": {
							"name": "keyword.operator.assignment.roads"
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*\\*(?!/)",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.roads"
						}
					},
					"end": "\\*/",
					"name": "comment.block.documentation.roads"
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.roads"
						}
					},
					"end": "\\*/",
					"name": "comment.block.roads"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.roads"
						}
					},
					"match": "(//).*$\\n?",
					"name": "comment.line.double-slash.roads"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.roads"
						}
					},
					"match": "(\\#).*$\\n?",
					"name": "comment.line.number-sign.roads"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"match": "\\b([0-9][0-9_]*)?(\\.[0-9][0-9_]*)(\\.[0-9][0-9_]*)+\\b",
					"name": "invalid.illegal.number.roads"
				},
				{
					"match": "\\b([0-9][0-9_]*\\.[0-9][0-9_]*)|(\\.[0-9][0-9_]*)\\b",
					"name": "constant.numeric.float.roads"
				},
				{
					"match": "\\b([0-9][0-9_]*)\\b",
					"name": "constant.numeric.integer.roads"
				}
			]
		},
		"string": {
			"name": "string.quoted.double.roads",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.roads",
					"match": "\\\\."
				}
			]
		},
		"tag": {
			"match": "((?:[A-Z][a-z0-9]+)(?:(?:\\d)|(?:[A-Z0-9][a-z0-9]+))*(?:[A-Z])?)",
			"name": "entity.name.type.roads"
		},
		"list": {
			"name": "meta.list.literal.roads",
			"begin": "\\s*(\\[)",
			"beginCaptures": {
				"1": {
					"name": "meta.brace.square.roads"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.roads"
				}
			},
			"patterns": [
				{
					"include": "#value"
				},
				{
					"include": "#comma"
				}
			]
		},
		"record": {
			"name": "meta.record.literal.roads",
			"begin": "\\s*((?:[A-Z][a-z0-9]+)(?:(?:\\d)|(?:[A-Z0-9][a-z0-9]+))*(?:[A-Z])?)?(\\{)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type.roads"
				},
				"2": {
					"name": "meta.brace.curly.roads"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "meta.brace.curly.roads"
				}
			},
			"patterns": [
				{
					"include": "#declaration"
				},
				{
					"include": "#value"
				},
				{
					"include": "#comma"
				}
			]
		},
		"whitespace": {
			"match": "[ \\t\\r\\n]+"
		},
		"comma": {
			"match": "\\,"
		},
		"value": {
			"patterns": [
				{
					"include": "#number"
				},
				{
					"include": "#string"
				},
				{
					"include": "#tag"
				},
				{
					"include": "#list"
				},
				{
					"include": "#record"
				},
				{
					"include": "#comments"
				}
			]
		}
	}
}